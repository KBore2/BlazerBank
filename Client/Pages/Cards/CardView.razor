@page "/customerview"
@page "/customerview/{id:int}"
@using BlazerBank.Domain.Models
@inject NavigationManager NavigationManager

@inject ICustomerService CustomerService

<h3>Customer</h3>

@if(Id == null)
{
    <h3>Create new Customer</h3>
}
else
{
    <h3>Edit @CustomerService.Customer.FirstName</h3>
}

<EditForm Model="@CustomerService.Customer" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="@CustomerService.Customer.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Last Name</label>
        <InputText id="lastname" @bind-Value="@CustomerService.Customer.LastName" class="form-control"></InputText>
    </div>
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteCustomer">Delete Customer</button>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;


    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            btnText = "Save new customer";
        }
        else
        {
            btnText = "Update Customer";
            await CustomerService.GetCustomer(Id);
        }
    }


    async void HandleSubmit()
    {
        if (Id == null)
        {
            await CustomerService.Create(CustomerService.Customer);
            NavigationManager.NavigateTo("customers");
        }
        else
        {
            await CustomerService.Edit(Id,CustomerService.Customer);
        }
    }

    async void DeleteCustomer()
    {
        if (Id != null)
        {
            await CustomerService.DeleteConfirmed(CustomerService.Customer.CustomerId);
        }
        NavigationManager.NavigateTo("customers");
    }


}
